name: 4-Gate Validation

on:
  push:
    branches: [ main, develop, 'feature/**', 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  gate-validation:
    name: Run 4-Gate System Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio

      - name: Run Gate 1 - Net Agency
        id: gate1
        run: |
          echo "::group::Gate 1: Net Agency"
          python scripts/gates/check_gate1.py || exit_code=$?
          echo "::endgroup::"
          if [ $exit_code -ne 0 ]; then
            echo "::error::Gate 1 (Net Agency) failed"
            exit 1
          fi

      - name: Run Gate 2 - Extraction Static Analysis
        id: gate2
        run: |
          echo "::group::Gate 2: Extraction Static Analysis"
          python scripts/gates/check_gate2.py || exit_code=$?
          echo "::endgroup::"
          if [ $exit_code -ne 0 ]; then
            echo "::error::Gate 2 (Extraction Static Analysis) failed"
            exit 1
          fi

      - name: Run Gate 3 - Humanity Override
        id: gate3
        run: |
          echo "::group::Gate 3: Humanity Override"
          python scripts/gates/check_gate3.py || exit_code=$?
          echo "::endgroup::"
          if [ $exit_code -ne 0 ]; then
            echo "::error::Gate 3 (Humanity Override) failed"
            exit 1
          fi

      - name: Run Gate 4 - Performance Parity
        id: gate4
        run: |
          echo "::group::Gate 4: Performance Parity"
          python scripts/gates/check_gate4.py || exit_code=$?
          echo "::endgroup::"
          if [ $exit_code -ne 0 ]; then
            echo "::error::Gate 4 (Performance Parity) failed"
            exit 1
          fi

      - name: Run Combined Gate Check
        run: |
          echo "::group::All Gates Combined"
          python scripts/gates/pre_commit_gate_check.py
          echo "::endgroup::"

      - name: Security Scan
        run: |
          echo "::group::Secret Scanning"
          python scripts/security/scan_secrets.py
          echo "::endgroup::"

      - name: Generate Gate Report
        if: always()
        run: |
          python scripts/gates/generate_report.py > gate_report.md
          cat gate_report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Gate Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gate-validation-report
          path: gate_report.md

  performance-tests:
    name: Performance Validation (Gate 4)
    runs-on: ubuntu-latest
    needs: gate-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio pytest-benchmark

      - name: Run Performance Tests
        run: |
          pytest tests/performance/ -v --benchmark-only

      - name: Check Performance Baselines
        run: |
          python scripts/gates/check_performance_baselines.py

  security-audit:
    name: Security Audit (Gate 2 Extended)
    runs-on: ubuntu-latest
    needs: gate-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit safety

      - name: Run Bandit Security Scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f screen

      - name: Check for Vulnerable Dependencies
        run: |
          safety check --json || true
          safety check

      - name: Secret Scanning
        run: |
          python -c "from ai_pal.security import scan_file; import sys; from pathlib import Path; results = {}; [results.update({str(f): scan_file(f)}) for f in Path('src').rglob('*.py')]; sys.exit(1 if any(results.values()) else 0)"

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  ari-analysis:
    name: Agency Retention Analysis (Gate 1 Extended)
    runs-on: ubuntu-latest
    needs: gate-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Analyze Code for Skill Development Patterns
        run: |
          python scripts/gates/analyze_ari_impact.py

      - name: Check for Deskilling Patterns
        run: |
          python scripts/gates/detect_deskilling.py

      - name: Generate ARI Report
        run: |
          python scripts/gates/generate_ari_report.py > ari_report.md

      - name: Upload ARI Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ari-analysis-report
          path: ari_report.md

  final-validation:
    name: Final Gate Validation Summary
    runs-on: ubuntu-latest
    needs: [gate-validation, performance-tests, security-audit, ari-analysis]
    if: always()

    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v3

      - name: Generate Summary
        run: |
          echo "# 4-Gate Validation Summary" > summary.md
          echo "" >> summary.md
          echo "## Status" >> summary.md
          echo "- Gate Validation: ${{ needs.gate-validation.result }}" >> summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> summary.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> summary.md
          echo "- ARI Analysis: ${{ needs.ari-analysis.result }}" >> summary.md
          echo "" >> summary.md

          if [ "${{ needs.gate-validation.result }}" == "success" ] && \
             [ "${{ needs.performance-tests.result }}" == "success" ] && \
             [ "${{ needs.security-audit.result }}" == "success" ] && \
             [ "${{ needs.ari-analysis.result }}" == "success" ]; then
            echo "✅ **ALL GATES PASSED**" >> summary.md
          else
            echo "❌ **ONE OR MORE GATES FAILED**" >> summary.md
          fi

          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
