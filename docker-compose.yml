version: '3.8'

services:
  # Main AI-PAL application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-pal-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://aipal:aipal_password@db:5432/aipal
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_ARI_MONITORING=true
      - ENABLE_EDM_MONITORING=true
      - ENABLE_GATES=true
      - ENABLE_FFE=true
      - LOG_LEVEL=INFO
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-pal-network

  # PostgreSQL database
  db:
    image: postgres:14-alpine
    container_name: ai-pal-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aipal
      - POSTGRES_USER=aipal
      - POSTGRES_PASSWORD=aipal_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aipal"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-pal-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-pal-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-pal-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-pal-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ai-pal-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-pal-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai-pal-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-pal-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ai-pal-network

networks:
  ai-pal-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
